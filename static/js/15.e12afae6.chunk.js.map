{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/handlebars/handlebars.js","../../markdown-nice/node_modules/codemirror/addon/mode/simple.js","../../markdown-nice/node_modules/codemirror/addon/mode/multiplex.js"],"names":["CodeMirror","defineSimpleMode","start","regex","push","token","handlebars_raw","pop","handlebars","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","Rule","data","next","this","apply","replace","result","i","length","asToken","tokenFunction","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","endScan","exec","current","index","curState","rule","matches","sol","stack","enterLocalMode","indent","indentation","indentUnit","dedent","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","lState","startState","forceEnd","indentFunction","textAfter","line","dontIndentStates","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode","outer","others","Array","prototype","call","arguments","string","pattern","from","returnEnd","found","innerActive","inner","curInner","oldContent","delimStyle","innerToken","innerStyle","cutOff","Infinity","other","outerIndent","possibleOuterIndent","outerToken","blankLine","electricChars"],"mappings":"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","file":"static/js/15.e12afae6.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [{\n      regex: /\\{\\{\\{/,\n      push: \"handlebars_raw\",\n      token: \"tag\"\n    }, {\n      regex: /\\{\\{!--/,\n      push: \"dash_comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{!/,\n      push: \"comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{/,\n      push: \"handlebars\",\n      token: \"tag\"\n    }],\n    handlebars_raw: [{\n      regex: /\\}\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }],\n    handlebars: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }, // Double and single quotes\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, // Handlebars keywords\n    {\n      regex: />|[#\\/]([A-Za-z_]\\w*)/,\n      token: \"keyword\"\n    }, {\n      regex: /(?:else|this)\\b/,\n      token: \"keyword\"\n    }, // Numeral\n    {\n      regex: /\\d+/i,\n      token: \"number\"\n    }, // Atoms like = and .\n    {\n      regex: /=|~|@|true|false/,\n      token: \"atom\"\n    }, // Paths\n    {\n      regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/,\n      token: \"variable-2\"\n    }],\n    dash_comment: [{\n      regex: /--\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, // Commented code\n    {\n      regex: /./,\n      token: \"comment\"\n    }],\n    comment: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, {\n      regex: /./,\n      token: \"comment\"\n    }],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n  CodeMirror.defineMode(\"handlebars\", function (config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: \"{{\",\n      close: /\\}\\}\\}?/,\n      mode: handlebars,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            state.pending = [];\n\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) state.pending.push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.multiplexingMode = function (outer\n  /*, others */\n  ) {\n    // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n    var others = Array.prototype.slice.call(arguments, 1);\n\n    function indexOf(string, pattern, from, returnEnd) {\n      if (typeof pattern == \"string\") {\n        var found = string.indexOf(pattern, from);\n        return returnEnd && found > -1 ? found + pattern.length : found;\n      }\n\n      var m = pattern.exec(from ? string.slice(from) : string);\n      return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          outer: CodeMirror.startState(outer),\n          innerActive: null,\n          inner: null\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          outer: CodeMirror.copyState(outer, state.outer),\n          innerActive: state.innerActive,\n          inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n        };\n      },\n      token: function token(stream, state) {\n        if (!state.innerActive) {\n          var cutOff = Infinity,\n              oldContent = stream.string;\n\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n            var found = indexOf(oldContent, other.open, stream.pos);\n\n            if (found == stream.pos) {\n              if (!other.parseDelimiters) stream.match(other.open);\n              state.innerActive = other; // Get the outer indent, making sure to handle CodeMirror.Pass\n\n              var outerIndent = 0;\n\n              if (outer.indent) {\n                var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n                if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n              }\n\n              state.inner = CodeMirror.startState(other.mode, outerIndent);\n              return other.delimStyle && other.delimStyle + \" \" + other.delimStyle + \"-open\";\n            } else if (found != -1 && found < cutOff) {\n              cutOff = found;\n            }\n          }\n\n          if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n          var outerToken = outer.token(stream, state.outer);\n          if (cutOff != Infinity) stream.string = oldContent;\n          return outerToken;\n        } else {\n          var curInner = state.innerActive,\n              oldContent = stream.string;\n\n          if (!curInner.close && stream.sol()) {\n            state.innerActive = state.inner = null;\n            return this.token(stream, state);\n          }\n\n          var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n\n          if (found == stream.pos && !curInner.parseDelimiters) {\n            stream.match(curInner.close);\n            state.innerActive = state.inner = null;\n            return curInner.delimStyle && curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\";\n          }\n\n          if (found > -1) stream.string = oldContent.slice(0, found);\n          var innerToken = curInner.mode.token(stream, state.inner);\n          if (found > -1) stream.string = oldContent;\n          if (found == stream.pos && curInner.parseDelimiters) state.innerActive = state.inner = null;\n\n          if (curInner.innerStyle) {\n            if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;else innerToken = curInner.innerStyle;\n          }\n\n          return innerToken;\n        }\n      },\n      indent: function indent(state, textAfter, line) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n        if (!mode.indent) return CodeMirror.Pass;\n        return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n      },\n      blankLine: function blankLine(state) {\n        var mode = state.innerActive ? state.innerActive.mode : outer;\n\n        if (mode.blankLine) {\n          mode.blankLine(state.innerActive ? state.inner : state.outer);\n        }\n\n        if (!state.innerActive) {\n          for (var i = 0; i < others.length; ++i) {\n            var other = others[i];\n\n            if (other.open === \"\\n\") {\n              state.innerActive = other;\n              state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n            }\n          }\n        } else if (state.innerActive.close === \"\\n\") {\n          state.innerActive = state.inner = null;\n        }\n      },\n      electricChars: outer.electricChars,\n      innerMode: function innerMode(state) {\n        return state.inner ? {\n          state: state.inner,\n          mode: state.innerActive.mode\n        } : {\n          state: state.outer,\n          mode: outer\n        };\n      }\n    };\n  };\n});"],"sourceRoot":""}