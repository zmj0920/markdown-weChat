{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/stex/stex.js"],"names":["CodeMirror","defineMode","_config","parserConfig","pushCommand","state","command","cmdState","push","peekCommand","length","addPluginPattern","pluginName","cmdStyle","styles","this","name","bracketNo","style","argument","styleIdentifier","openBracket","closeBracket","plugins","setState","f","normal","source","plug","match","cmdName","current","slice","hasOwnProperty","beginParams","inMathMode","ch","next","skipToEnd","test","eatWhile","context","i","getMostPowerful","endModeSeq","eatSpace","peek","eat","pop","popCommand","startState","copyState","s","token","stream","blankLine","lineComment","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/101.7529674b.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\n * Licence: MIT\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stex\", function (_config, parserConfig) {\n    \"use strict\";\n\n    function pushCommand(state, command) {\n      state.cmdState.push(command);\n    }\n\n    function peekCommand(state) {\n      if (state.cmdState.length > 0) {\n        return state.cmdState[state.cmdState.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    function popCommand(state) {\n      var plug = state.cmdState.pop();\n\n      if (plug) {\n        plug.closeBracket();\n      }\n    } // returns the non-default plugin closest to the end of the list\n\n\n    function getMostPowerful(state) {\n      var context = state.cmdState;\n\n      for (var i = context.length - 1; i >= 0; i--) {\n        var plug = context[i];\n\n        if (plug.name == \"DEFAULT\") {\n          continue;\n        }\n\n        return plug;\n      }\n\n      return {\n        styleIdentifier: function styleIdentifier() {\n          return null;\n        }\n      };\n    }\n\n    function addPluginPattern(pluginName, cmdStyle, styles) {\n      return function () {\n        this.name = pluginName;\n        this.bracketNo = 0;\n        this.style = cmdStyle;\n        this.styles = styles;\n        this.argument = null; // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n        this.styleIdentifier = function () {\n          return this.styles[this.bracketNo - 1] || null;\n        };\n\n        this.openBracket = function () {\n          this.bracketNo++;\n          return \"bracket\";\n        };\n\n        this.closeBracket = function () {};\n      };\n    }\n\n    var plugins = {};\n    plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n    plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n    plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n    plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n    plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n    plugins[\"label\"] = addPluginPattern(\"label\", \"tag\", [\"atom\"]);\n    plugins[\"ref\"] = addPluginPattern(\"ref\", \"tag\", [\"atom\"]);\n    plugins[\"eqref\"] = addPluginPattern(\"eqref\", \"tag\", [\"atom\"]);\n    plugins[\"cite\"] = addPluginPattern(\"cite\", \"tag\", [\"atom\"]);\n    plugins[\"bibitem\"] = addPluginPattern(\"bibitem\", \"tag\", [\"atom\"]);\n    plugins[\"Bibitem\"] = addPluginPattern(\"Bibitem\", \"tag\", [\"atom\"]);\n    plugins[\"RBibitem\"] = addPluginPattern(\"RBibitem\", \"tag\", [\"atom\"]);\n\n    plugins[\"DEFAULT\"] = function () {\n      this.name = \"DEFAULT\";\n      this.style = \"tag\";\n\n      this.styleIdentifier = this.openBracket = this.closeBracket = function () {};\n    };\n\n    function setState(state, f) {\n      state.f = f;\n    } // called when in a normal (no environment) context\n\n\n    function normal(source, state) {\n      var plug; // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        var cmdName = source.current().slice(1);\n        plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        setState(state, beginParams);\n        return plug.style;\n      } // escape characters\n\n\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      } // white space control characters\n\n\n      if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n        return \"tag\";\n      } // find if we're starting various math modes\n\n\n      if (source.match(\"\\\\[\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"\\\\]\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"\\\\(\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"\\\\)\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"$$\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"$$\");\n        });\n        return \"keyword\";\n      }\n\n      if (source.match(\"$\")) {\n        setState(state, function (source, state) {\n          return inMathMode(source, state, \"$\");\n        });\n        return \"keyword\";\n      }\n\n      var ch = source.next();\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      } else if (ch == '}' || ch == ']') {\n        plug = peekCommand(state);\n\n        if (plug) {\n          plug.closeBracket(ch);\n          setState(state, beginParams);\n        } else {\n          return \"error\";\n        }\n\n        return \"bracket\";\n      } else if (ch == '{' || ch == '[') {\n        plug = plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        return \"bracket\";\n      } else if (/\\d/.test(ch)) {\n        source.eatWhile(/[\\w.%]/);\n        return \"atom\";\n      } else {\n        source.eatWhile(/[\\w\\-_]/);\n        plug = getMostPowerful(state);\n\n        if (plug.name == 'begin') {\n          plug.argument = source.current();\n        }\n\n        return plug.styleIdentifier();\n      }\n    }\n\n    function inMathMode(source, state, endModeSeq) {\n      if (source.eatSpace()) {\n        return null;\n      }\n\n      if (endModeSeq && source.match(endModeSeq)) {\n        setState(state, normal);\n        return \"keyword\";\n      }\n\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        return \"tag\";\n      }\n\n      if (source.match(/^[a-zA-Z]+/)) {\n        return \"variable-2\";\n      } // escape characters\n\n\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      } // white space control characters\n\n\n      if (source.match(/^\\\\[,;!\\/]/)) {\n        return \"tag\";\n      } // special math-mode characters\n\n\n      if (source.match(/^[\\^_&]/)) {\n        return \"tag\";\n      } // non-special characters\n\n\n      if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n        return null;\n      }\n\n      if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n        return \"number\";\n      }\n\n      var ch = source.next();\n\n      if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      }\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      }\n\n      return \"error\";\n    }\n\n    function beginParams(source, state) {\n      var ch = source.peek(),\n          lastPlug;\n\n      if (ch == '{' || ch == '[') {\n        lastPlug = peekCommand(state);\n        lastPlug.openBracket(ch);\n        source.eat(ch);\n        setState(state, normal);\n        return \"bracket\";\n      }\n\n      if (/[ \\t\\r]/.test(ch)) {\n        source.eat(ch);\n        return null;\n      }\n\n      setState(state, normal);\n      popCommand(state);\n      return normal(source, state);\n    }\n\n    return {\n      startState: function startState() {\n        var f = parserConfig.inMathMode ? function (source, state) {\n          return inMathMode(source, state);\n        } : normal;\n        return {\n          cmdState: [],\n          f: f\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          cmdState: s.cmdState.slice(),\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        return state.f(stream, state);\n      },\n      blankLine: function blankLine(state) {\n        state.f = normal;\n        state.cmdState.length = 0;\n      },\n      lineComment: \"%\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-stex\", \"stex\");\n  CodeMirror.defineMIME(\"text/x-latex\", \"stex\");\n});"],"sourceRoot":""}