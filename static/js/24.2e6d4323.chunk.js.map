{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/wast/wast.js","../../markdown-nice/node_modules/codemirror/addon/mode/simple.js"],"names":["CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","comment","meta","dontIndentStates","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","Rule","data","push","this","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","index","curState","rule","matches","sol","stack","pop","enterLocalMode","indentation","indentUnit","j","backUp","join","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","textAfter","line","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode"],"mappings":"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","file":"static/js/24.2e6d4323.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode('wast', {\n    start: [{\n      regex: /[+\\-]?(?:nan(?::0x[0-9a-fA-F]+)?|infinity|inf|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*p[+\\/-]?\\d+|\\d+(?:\\.\\d*)?[eE][+\\-]?\\d*|\\d+\\.\\d*|0x[0-9a-fA-F]+|\\d+)/,\n      token: \"number\"\n    }, {\n      regex: /mut|nop|block|if|then|else|loop|br_if|br_table|br|call(_indirect)?|drop|end|return(_call(_indirect)?)?|local\\.(get|set|tee)|global\\.(get|set)|i(32|64)\\.(store(8|16)|(load(8|16)_[su]))|i64\\.(load32_[su]|store32)|[fi](32|64)\\.(const|load|store)|f(32|64)\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)|i(32|64)\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)|i64\\.extend_[su]_i32|i32\\.wrap_i64|i(32|64)\\.trunc_f(32|64)_[su]|f(32|64)\\.convert_i(32|64)_[su]|f64\\.promote_f32|f32\\.demote_f64|f32\\.reinterpret_i32|i32\\.reinterpret_f32|f64\\.reinterpret_i64|i64\\.reinterpret_f64|select|unreachable|current_memory|memory(\\.((atomic\\.(notify|wait(32|64)))|grow|size))?|type|\\bfunc\\b|param|result|local|global|module|start|elem|data|align|offset|import|export|i64\\.atomic\\.(load32_u|store32|rmw32\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)|i(32|64)\\.atomic\\.(load((8|16)_u)?|store(8|16)?|rmw(\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))|v128\\.(load|store|const|not|andnot|and|or|xor|bitselect)|i(8x16|16x8|32x4|64x2)\\.(shl|shr_[su])|i(8x16|16x8)\\.(extract_lane_[su]|((add|sub)_saturate_[su])|avgr_u)|(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\\.(splat|replace_lane|neg|add|sub)|i(8x16|16x8|32x4)\\.(eq|ne|([lg][te]_[su])|abs|any_true|all_true|bitmask|((min|max)_[su]))|f(32x4|64x2)\\.(eq|ne|[lg][te]|abs|sqrt|mul|div|min|max)|[fi](32x4|64x2)\\.extract_lane|v8x16\\.(shuffle|swizzle)|i16x8\\.(load8x8_[su]|narrow_i32x4_[su]|widen_(low|high)_i8x16_[su]|mul)|i32x4\\.(load16x4_[su]|widen_(low|high)_i16x8_[su]|mul|trunc_sat_f32x4_[su])|i64x2\\.(load32x2_[su]|mul)|(v(8x16|16x8|32x4|64x2)\\.load_splat)|i8x16\\.narrow_i16x8_[su]|f32x4\\.convert_i32x4_[su]|ref\\.(func|(is_)?null)|\\bextern\\b|table(\\.(size|get|set|size|grow|fill|init|copy))?/,\n      token: \"keyword\"\n    }, {\n      regex: /\\b(funcref|externref|[fi](32|64))\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\$([a-zA-Z0-9_`\\+\\-\\*\\/\\\\\\^~=<>!\\?@#$%&|:\\.]+)/,\n      token: \"variable-2\"\n    }, {\n      regex: /\"(?:[^\"\\\\\\x00-\\x1f\\x7f]|\\\\[nt\\\\'\"]|\\\\[0-9a-fA-F][0-9a-fA-F])*\"/,\n      token: \"string\"\n    }, {\n      regex: /\\(;.*?/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /;;.*$/,\n      token: \"comment\"\n    }, {\n      regex: /\\(/,\n      indent: true\n    }, {\n      regex: /\\)/,\n      dedent: true\n    }],\n    comment: [{\n      regex: /.*?;\\)/,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: ['comment']\n    }\n  }); // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,\n  // which seems like a reasonable choice, although it's not standard right now.\n\n  CodeMirror.defineMIME(\"text/webassembly\", \"wast\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            state.pending = [];\n\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) state.pending.push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});"],"sourceRoot":""}