{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/shell/shell.js"],"names":["CodeMirror","defineMode","words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenString","quote","close","stream","state","next","escaped","tokens","shift","peek","backUp","unshift","tokenDollar","tokenize","test","tokenStringStart","registerHelper","concat","eat","ch","eatWhile","eatSpace","delim","sol","skipToEnd","match","heredoc","string","eol","cur","current","hasOwnProperty","startState","token","closeBrackets","lineComment","fold","defineMIME","mod","__webpack_require__"],"mappings":"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","file":"static/js/93.28e9b4a6.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('shell', function () {\n    var words = {};\n\n    function define(style, dict) {\n      for (var i = 0; i < dict.length; i++) {\n        words[dict[i]] = style;\n      }\n    }\n\n    ;\n    var commonAtoms = [\"true\", \"false\"];\n    var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\", \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n    var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\", \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\", \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\", \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\", \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\", \"yes\", \"zsh\"];\n    CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n    define('atom', commonAtoms);\n    define('keyword', commonKeywords);\n    define('builtin', commonCommands);\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) return null;\n      var sol = stream.sol();\n      var ch = stream.next();\n\n      if (ch === '\\\\') {\n        stream.next();\n        return null;\n      }\n\n      if (ch === '\\'' || ch === '\"' || ch === '`') {\n        state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n        return tokenize(stream, state);\n      }\n\n      if (ch === '#') {\n        if (sol && stream.eat('!')) {\n          stream.skipToEnd();\n          return 'meta'; // 'comment'?\n        }\n\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      if (ch === '$') {\n        state.tokens.unshift(tokenDollar);\n        return tokenize(stream, state);\n      }\n\n      if (ch === '+' || ch === '=') {\n        return 'operator';\n      }\n\n      if (ch === '-') {\n        stream.eat('-');\n        stream.eatWhile(/\\w/);\n        return 'attribute';\n      }\n\n      if (ch == \"<\") {\n        if (stream.match(\"<<\")) return \"operator\";\n        var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/);\n\n        if (heredoc) {\n          state.tokens.unshift(tokenHeredoc(heredoc[1]));\n          return 'string-2';\n        }\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n\n        if (stream.eol() || !/\\w/.test(stream.peek())) {\n          return 'number';\n        }\n      }\n\n      stream.eatWhile(/[\\w-]/);\n      var cur = stream.current();\n      if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n      return words.hasOwnProperty(cur) ? words[cur] : null;\n    }\n\n    function tokenString(quote, style) {\n      var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote;\n      return function (stream, state) {\n        var next,\n            escaped = false;\n\n        while ((next = stream.next()) != null) {\n          if (next === close && !escaped) {\n            state.tokens.shift();\n            break;\n          } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n            escaped = true;\n            stream.backUp(1);\n            state.tokens.unshift(tokenDollar);\n            break;\n          } else if (!escaped && quote !== close && next === quote) {\n            state.tokens.unshift(tokenString(quote, style));\n            return tokenize(stream, state);\n          } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n            state.tokens.unshift(tokenStringStart(next, \"string\"));\n            stream.backUp(1);\n            break;\n          }\n\n          escaped = !escaped && next === '\\\\';\n        }\n\n        return style;\n      };\n    }\n\n    ;\n\n    function tokenStringStart(quote, style) {\n      return function (stream, state) {\n        state.tokens[0] = tokenString(quote, style);\n        stream.next();\n        return tokenize(stream, state);\n      };\n    }\n\n    var tokenDollar = function tokenDollar(stream, state) {\n      if (state.tokens.length > 1) stream.eat('$');\n      var ch = stream.next();\n\n      if (/['\"({]/.test(ch)) {\n        state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n        return tokenize(stream, state);\n      }\n\n      if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n      state.tokens.shift();\n      return 'def';\n    };\n\n    function tokenHeredoc(delim) {\n      return function (stream, state) {\n        if (stream.sol() && stream.string == delim) state.tokens.shift();\n        stream.skipToEnd();\n        return \"string-2\";\n      };\n    }\n\n    function tokenize(stream, state) {\n      return (state.tokens[0] || tokenBase)(stream, state);\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        return {\n          tokens: []\n        };\n      },\n      token: function token(stream, state) {\n        return tokenize(stream, state);\n      },\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      lineComment: '#',\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-sh', 'shell'); // Apache uses a slightly different Media Type for Shell scripts\n  // http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\n\n  CodeMirror.defineMIME('application/x-sh', 'shell');\n});"],"sourceRoot":""}