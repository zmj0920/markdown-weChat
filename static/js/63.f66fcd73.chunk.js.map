{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/julia/julia.js"],"names":["CodeMirror","defineMode","config","parserConf","wordRegexp","words","end","RegExp","join","operators","delimiters","identifiers","chars","keywordsList","builtinsList","registerHelper","concat","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","inArray","state","nestedArrays","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","delimiter","ch","peek","skipToEnd","push","nestedGenerators","pop","inGenerator","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","current","substr","eat","next","eatWhile","isDefinition","tokenCallOrDef","charsAdvanced","firstParenPos","backUp","nestedParameters","nestedComments","isChar","value","parseInt","external","startState","token","style","indent","textAfter","delta","test","indentUnit","electricInput","blockCommentStart","blockCommentEnd","lineComment","closeBrackets","fold","defineMIME","mod","__webpack_require__"],"mappings":"+EAOC,SAAAA,GACD,aAEAA,EAAAC,WAAA,iBAAAC,EAAAC,GACA,SAAAC,EAAAC,EAAAC,GAKA,MAJA,qBAAAA,IACAA,EAAA,OAGA,IAAAC,OAAA,MAAAF,EAAAG,KAAA,YAAAF,GAGA,IAIAG,EAAAN,EAAAM,WAAAL,EAAA,2TACAM,EAAAP,EAAAO,YAAA,eACAC,EAAAR,EAAAQ,aAAA,wEACAC,EAAAR,EAAA,CAPA,iBACA,wBACA,2BACA,yEAIA,KAGAS,EAAA,8TACAC,EAAA,uCACAd,EAAAe,eAAA,oBAAAF,EAAAG,OAAAF,IACA,IAAAG,EAAAb,EALA,wIAMAc,EAAAd,EALA,2CAMAe,EAAAf,EAAAS,GACAO,EAAAhB,EAAAU,GACAO,EAAA,mBACAC,EAAA,+CACAC,EAAA,uCAEA,SAAAC,EAAAC,GACA,OAAAA,EAAAC,aAAA,EAOA,SAAAC,EAAAF,EAAAG,GAKA,MAJA,qBAAAA,IACAA,EAAA,GAGAH,EAAAI,OAAAC,QAAAF,EACA,KAGAH,EAAAI,OAAAJ,EAAAI,OAAAC,QAAAF,EAAA,IAIA,SAAAG,EAAAC,EAAAP,GAEA,GAAAO,EAAAC,MAAA,SAEA,OADAR,EAAAS,SAAAC,EACAV,EAAAS,SAAAF,EAAAP,GAIA,IAAAW,EAAAX,EAAAW,YAQA,GANAJ,EAAAK,QACAD,GAAA,GAGAX,EAAAW,aAAA,EAEAA,GACAJ,EAAAC,MAAA,OACA,iBAIA,GAAAD,EAAAC,MAAA,UACA,cACO,GAAAD,EAAAC,MAAA,WACP,iBAGA,GAAAD,EAAAM,WACA,YAGA,IA+CAL,EA2PAM,EA1SAC,EAAAR,EAAAS,OAEA,SAAAD,EAEA,OADAR,EAAAU,YACA,UAaA,GAVA,MAAAF,IACAf,EAAAI,OAAAc,KAAA,KACAlB,EAAAC,gBAGA,MAAAc,IACAf,EAAAI,OAAAc,KAAA,KACAlB,EAAAmB,oBAGApB,EAAAC,IAAA,MAAAe,EAAA,CACA,KAAAf,EAAAI,OAAAC,QAAA,MAAAH,EAAAF,IACAA,EAAAI,OAAAgB,MAGApB,EAAAI,OAAAgB,MACApB,EAAAC,eACAD,EAAAW,aAAA,EAGA,GA5EA,SAAAX,GACA,OAAAA,EAAAmB,iBAAA,EA2EAE,CAAArB,IAAA,MAAAe,EAAA,CACA,KAAAf,EAAAI,OAAAC,QAAA,MAAAH,EAAAF,IACAA,EAAAI,OAAAgB,MAGApB,EAAAI,OAAAgB,MACApB,EAAAmB,mBACAnB,EAAAW,aAAA,EAGA,GAAAZ,EAAAC,GAAA,CACA,UAAAA,EAAAsB,WAAAf,EAAAC,MAAA,KACA,iBAGA,GAAAD,EAAAC,MAAA,OACA,eAeA,IATAA,EAAAD,EAAAC,MAAAhB,GAAA,KACAQ,EAAAI,OAAAc,KAAAV,EAAA,IAGAD,EAAAC,MAAAf,GAAA,IACAO,EAAAI,OAAAgB,MAIAb,EAAAC,MAAA,gBAEA,OADAR,EAAAS,SAAAc,EACAvB,EAAAS,SAAAF,EAAAP,GAIA,IAAAW,GAAAJ,EAAAC,MAAAX,IAAAU,EAAAC,MAAA,sEACA,gBAQA,GAAAD,EAAAC,MAAAxB,GACA,iBAIA,GAAAuB,EAAAC,MAAA,cACA,IAAAgB,EAAA1C,OAAA,SACA2C,GAAA,EAgCA,GA9BAlB,EAAAC,MAAA,oCACAiB,GAAA,GAIAlB,EAAAC,MAAA,oBACAiB,GAAA,GAIAlB,EAAAC,MAAA,gBACAiB,GAAA,GAIAlB,EAAAC,MAAA,iBACAiB,GAAA,GAKAlB,EAAAC,MAAA,iGACAiB,GAAA,GAGAlB,EAAAC,MAAA,8BACAiB,GAAA,GAIAA,EAIA,OAFAlB,EAAAC,MAAAgB,GACAxB,EAAAW,aAAA,EACA,SAKA,GAAAJ,EAAAC,MAAA,KAEA,OADAR,EAAAS,SAAAiB,EACA1B,EAAAS,SAAAF,EAAAP,GAIA,GAAAO,EAAAC,MAAAV,GAEA,OADAE,EAAAS,UA2KA,SADAK,EA1KAP,EAAAoB,WA2KAC,QAAA,GACAd,EAAA,MACO,MAAAA,EAAAc,QAAA,KACPd,EAAA,KAGA,SAAAP,EAAAP,GACA,GAAAO,EAAAsB,IAAA,MACAtB,EAAAuB,WACS,IAAAvB,EAAAC,MAAAM,GAGT,OAFAd,EAAAS,SAAAH,EACAN,EAAAW,aAAA,EACA,SAEAJ,EAAAsB,IAAA,QAIA,OADAtB,EAAAwB,SAAA,WACA,WA5LA/B,EAAAS,SAAAF,EAAAP,GAGA,GAAAO,EAAAC,MAAAZ,GACA,aAGA,GAAAW,EAAAC,MAAAvB,GACA,YAGA,GAAAsB,EAAAC,MAAAd,GACA,gBAGA,GAAAa,EAAAC,MAAAb,GACA,gBAGA,IAAAqC,EAAAhC,EAAAgC,cAAA,YAAAhC,EAAAsB,WAAA,SAAAtB,EAAAsB,WAAA,QAAAtB,EAAAsB,WAAA,UAAAtB,EAAAsB,WAAA,aAAAtB,EAAAsB,UAEA,OAAAf,EAAAC,MAAAtB,GACA8C,EACA,MAAAzB,EAAAS,QACAhB,EAAAgC,cAAA,EACA,aAGAhC,EAAAgC,cAAA,EACA,OAGAzB,EAAAC,MAAA,iBAAmC,IACnCR,EAAAS,SAAAwB,EACAjC,EAAAS,SAAAF,EAAAP,KAGAA,EAAAW,aAAA,EACA,aAIAJ,EAAAuB,OACA,SAGA,SAAAG,EAAA1B,EAAAP,GACA,OAAa,CACb,IAAAQ,EAAAD,EAAAC,MAAA,YACA0B,EAAA,EAQA,GANA1B,IACAR,EAAAmC,cAAA,IAAAnC,EAAAmC,cAAAnC,EAAAI,OAAAC,QACAL,EAAAI,OAAAc,KAAA,KACAgB,GAAA1B,EAAA,GAAAH,QAGA,KAAAH,EAAAF,IAAAO,EAAAC,MAAA,OACAR,EAAAI,OAAAgB,MACAc,GAAA,EAEAlC,EAAAI,OAAAC,QAAAL,EAAAmC,eAAA,CACA,IAAAH,EAAAzB,EAAAC,MAAA,uCAIA,OAHAD,EAAA6B,OAAAF,GACAlC,EAAAmC,eAAA,EACAnC,EAAAS,SAAAH,EACA0B,EAAA,MACA,UAOA,GAAAzB,EAAAC,MAAA,WAGA,IAFAD,EAAA6B,OAAAF,GAEAlC,EAAAI,OAAAC,OAAAL,EAAAmC,eACAnC,EAAAI,OAAAgB,MAKA,OAFApB,EAAAmC,eAAA,EACAnC,EAAAS,SAAAH,EACA,UAGA,IAAAC,EAAAC,MAAA,WAEA,OADAD,EAAAuB,OACA,MAKA,SAAAP,EAAAhB,EAAAP,GAeA,OAdAO,EAAAC,MAAA,wBAEAD,EAAAC,MAAA,KACAR,EAAAqC,mBACO9B,EAAAC,MAAA,MAAyBR,EAAAqC,iBAAA,GAChCrC,EAAAqC,mBAGArC,EAAAqC,iBAAA,EACA9B,EAAAC,MAAA,eAA+BD,EAAAuB,OACxB,GAAA9B,EAAAqC,mBACPrC,EAAAS,SAAAH,GAGA,UAGA,SAAAI,EAAAH,EAAAP,GAcA,OAbAO,EAAAC,MAAA,OACAR,EAAAsC,iBAGA/B,EAAAC,MAAA,mBACAD,EAAAU,YAGAV,EAAAC,MAAA,QACAR,EAAAsC,iBACA,GAAAtC,EAAAsC,iBAAAtC,EAAAS,SAAAH,IAGA,UAGA,SAAAoB,EAAAnB,EAAAP,GACA,IACAQ,EADA+B,GAAA,EAGA,GAAAhC,EAAAC,MAAArB,GACAoD,GAAA,OACO,GAAA/B,EAAAD,EAAAC,MAAA,4BAAiD,CACxD,IAAAgC,EAAAC,SAAAjC,EAAA,QAEAgC,GAAA,OAAAA,GAAA,SAEAD,GAAA,EACAhC,EAAAuB,aAEO,GAAAtB,EAAAD,EAAAC,MAAA,8BAAoD,CAC3D,IAAAgC,EAAAC,SAAAjC,EAAA,OAEAgC,GAAA,UAEAD,GAAA,EACAhC,EAAAuB,QAIA,OAAAS,GACAvC,EAAAW,aAAA,EACAX,EAAAS,SAAAH,EACA,WAGAC,EAAAC,MAAA,gBACAD,EAAAU,YAGAV,EAAAC,MAAA,OACAR,EAAAS,SAAAH,GAGA,SA4BA,IAAAoC,EAAA,CACAC,WAAA,WACA,OACAlC,SAAAH,EACAF,OAAA,GACAkB,UAAA,KACAX,aAAA,EACAqB,cAAA,EACA/B,aAAA,EACAqC,eAAA,EACAnB,iBAAA,EACAkB,iBAAA,EACAF,eAAA,IAGAS,MAAA,SAAArC,EAAAP,GACA,IAAA6C,EAAA7C,EAAAS,SAAAF,EAAAP,GACA2B,EAAApB,EAAAoB,UAMA,OAJAA,GAAAkB,IACA7C,EAAAsB,UAAAK,GAGAkB,GAEAC,OAAA,SAAA9C,EAAA+C,GACA,IAAAC,EAAA,EAMA,OAJA,MAAAD,GAAA,MAAAA,GAAA,SAAAE,KAAAF,IAAA,QAAAE,KAAAF,IAAA,WAAAE,KAAAF,IAAA,YAAAE,KAAAF,IAAA,WAAAE,KAAAF,MACAC,GAAA,IAGAhD,EAAAI,OAAAC,OAAA2C,GAAAvE,EAAAyE,YAEAC,cAAA,+BACAC,kBAAA,KACAC,gBAAA,KACAC,YAAA,IACAC,cAAA,WACAC,KAAA,UAEA,OAAAd,IAEAnE,EAAAkF,WAAA,wBAvcAC,CAAQC,EAAQ","file":"static/js/63.f66fcd73.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"julia\", function (config, parserConf) {\n    function wordRegexp(words, end) {\n      if (typeof end === \"undefined\") {\n        end = \"\\\\b\";\n      }\n\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n    }\n\n    var octChar = \"\\\\\\\\[0-7]{1,3}\";\n    var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n    var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n    var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n    var operators = parserConf.operators || wordRegexp([\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n    var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n    var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n    var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\n    var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n    var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\n    var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n    CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n    var openers = wordRegexp(openersList);\n    var closers = wordRegexp(closersList);\n    var keywords = wordRegexp(keywordsList);\n    var builtins = wordRegexp(builtinsList);\n    var macro = /^@[_A-Za-z][\\w]*/;\n    var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n    var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n    function inArray(state) {\n      return state.nestedArrays > 0;\n    }\n\n    function inGenerator(state) {\n      return state.nestedGenerators > 0;\n    }\n\n    function currentScope(state, n) {\n      if (typeof n === \"undefined\") {\n        n = 0;\n      }\n\n      if (state.scopes.length <= n) {\n        return null;\n      }\n\n      return state.scopes[state.scopes.length - (n + 1)];\n    } // tokenizers\n\n\n    function tokenBase(stream, state) {\n      // Handle multiline comments\n      if (stream.match('#=', false)) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      } // Handle scope changes\n\n\n      var leavingExpr = state.leavingExpr;\n\n      if (stream.sol()) {\n        leavingExpr = false;\n      }\n\n      state.leavingExpr = false;\n\n      if (leavingExpr) {\n        if (stream.match(/^'+/)) {\n          return \"operator\";\n        }\n      }\n\n      if (stream.match(/\\.{4,}/)) {\n        return \"error\";\n      } else if (stream.match(/\\.{1,3}/)) {\n        return \"operator\";\n      }\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle single line comments\n\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (ch === '[') {\n        state.scopes.push('[');\n        state.nestedArrays++;\n      }\n\n      if (ch === '(') {\n        state.scopes.push('(');\n        state.nestedGenerators++;\n      }\n\n      if (inArray(state) && ch === ']') {\n        while (state.scopes.length && currentScope(state) !== \"[\") {\n          state.scopes.pop();\n        }\n\n        state.scopes.pop();\n        state.nestedArrays--;\n        state.leavingExpr = true;\n      }\n\n      if (inGenerator(state) && ch === ')') {\n        while (state.scopes.length && currentScope(state) !== \"(\") {\n          state.scopes.pop();\n        }\n\n        state.scopes.pop();\n        state.nestedGenerators--;\n        state.leavingExpr = true;\n      }\n\n      if (inArray(state)) {\n        if (state.lastToken == \"end\" && stream.match(':')) {\n          return \"operator\";\n        }\n\n        if (stream.match('end')) {\n          return \"number\";\n        }\n      }\n\n      var match;\n\n      if (match = stream.match(openers, false)) {\n        state.scopes.push(match[0]);\n      }\n\n      if (stream.match(closers, false)) {\n        state.scopes.pop();\n      } // Handle type annotations\n\n\n      if (stream.match(/^::(?![:\\$])/)) {\n        state.tokenize = tokenAnnotation;\n        return state.tokenize(stream, state);\n      } // Handle symbols\n\n\n      if (!leavingExpr && stream.match(symbol) || stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n        return \"builtin\";\n      } // Handle parametric types\n      //if (stream.match(/^{[^}]*}(?=\\()/)) {\n      //  return \"builtin\";\n      //}\n      // Handle operators and Delimiters\n\n\n      if (stream.match(operators)) {\n        return \"operator\";\n      } // Handle Number Literals\n\n\n      if (stream.match(/^\\.?\\d/, false)) {\n        var imMatcher = RegExp(/^im\\b/);\n        var numberLiteral = false;\n\n        if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n          numberLiteral = true;\n        } // Integers\n\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) {\n          numberLiteral = true;\n        } // Hex\n\n\n        if (stream.match(/^0b[01_]+/i)) {\n          numberLiteral = true;\n        } // Binary\n\n\n        if (stream.match(/^0o[0-7_]+/i)) {\n          numberLiteral = true;\n        } // Octal\n        // Floats\n\n\n        if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n          numberLiteral = true;\n        }\n\n        if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n          numberLiteral = true;\n        } // Decimal\n\n\n        if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n        }\n      } // Handle Chars\n\n\n      if (stream.match('\\'')) {\n        state.tokenize = tokenChar;\n        return state.tokenize(stream, state);\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n\n      if (stream.match(macro)) {\n        return \"meta\";\n      }\n\n      if (stream.match(delimiters)) {\n        return null;\n      }\n\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n\n      if (stream.match(builtins)) {\n        return \"builtin\";\n      }\n\n      var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n      if (stream.match(identifiers)) {\n        if (isDefinition) {\n          if (stream.peek() === '.') {\n            state.isDefinition = true;\n            return \"variable\";\n          }\n\n          state.isDefinition = false;\n          return \"def\";\n        }\n\n        if (stream.match(/^({[^}]*})*\\(/, false)) {\n          state.tokenize = tokenCallOrDef;\n          return state.tokenize(stream, state);\n        }\n\n        state.leavingExpr = true;\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return \"error\";\n    }\n\n    function tokenCallOrDef(stream, state) {\n      for (;;) {\n        var match = stream.match(/^(\\(\\s*)/),\n            charsAdvanced = 0;\n\n        if (match) {\n          if (state.firstParenPos < 0) state.firstParenPos = state.scopes.length;\n          state.scopes.push('(');\n          charsAdvanced += match[1].length;\n        }\n\n        if (currentScope(state) == '(' && stream.match(')')) {\n          state.scopes.pop();\n          charsAdvanced += 1;\n\n          if (state.scopes.length <= state.firstParenPos) {\n            var isDefinition = stream.match(/^(\\s*where\\s+[^\\s=]+)*\\s*?=(?!=)/, false);\n            stream.backUp(charsAdvanced);\n            state.firstParenPos = -1;\n            state.tokenize = tokenBase;\n            if (isDefinition) return \"def\";\n            return \"builtin\";\n          }\n        } // Unfortunately javascript does not support multiline strings, so we have\n        // to undo anything done upto here if a function call or definition splits\n        // over two or more lines.\n\n\n        if (stream.match(/^$/g, false)) {\n          stream.backUp(charsAdvanced);\n\n          while (state.scopes.length > state.firstParenPos) {\n            state.scopes.pop();\n          }\n\n          state.firstParenPos = -1;\n          state.tokenize = tokenBase;\n          return \"builtin\";\n        }\n\n        if (!stream.match(/^[^()]+/)) {\n          stream.next();\n          return null;\n        }\n      }\n    }\n\n    function tokenAnnotation(stream, state) {\n      stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n\n      if (stream.match('{')) {\n        state.nestedParameters++;\n      } else if (stream.match('}') && state.nestedParameters > 0) {\n        state.nestedParameters--;\n      }\n\n      if (state.nestedParameters > 0) {\n        stream.match(/.*?(?={|})/) || stream.next();\n      } else if (state.nestedParameters == 0) {\n        state.tokenize = tokenBase;\n      }\n\n      return \"builtin\";\n    }\n\n    function tokenComment(stream, state) {\n      if (stream.match('#=')) {\n        state.nestedComments++;\n      }\n\n      if (!stream.match(/.*?(?=(#=|=#))/)) {\n        stream.skipToEnd();\n      }\n\n      if (stream.match('=#')) {\n        state.nestedComments--;\n        if (state.nestedComments == 0) state.tokenize = tokenBase;\n      }\n\n      return \"comment\";\n    }\n\n    function tokenChar(stream, state) {\n      var isChar = false,\n          match;\n\n      if (stream.match(chars)) {\n        isChar = true;\n      } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n        var value = parseInt(match[1], 16);\n\n        if (value <= 55295 || value >= 57344) {\n          // (U+0,U+D7FF), (U+E000,U+FFFF)\n          isChar = true;\n          stream.next();\n        }\n      } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n        var value = parseInt(match[1], 16);\n\n        if (value <= 1114111) {\n          // U+10FFFF\n          isChar = true;\n          stream.next();\n        }\n      }\n\n      if (isChar) {\n        state.leavingExpr = true;\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n\n      if (!stream.match(/^[^']+(?=')/)) {\n        stream.skipToEnd();\n      }\n\n      if (stream.match('\\'')) {\n        state.tokenize = tokenBase;\n      }\n\n      return \"error\";\n    }\n\n    function tokenStringFactory(delimiter) {\n      if (delimiter.substr(-3) === '\"\"\"') {\n        delimiter = '\"\"\"';\n      } else if (delimiter.substr(-1) === '\"') {\n        delimiter = '\"';\n      }\n\n      function tokenString(stream, state) {\n        if (stream.eat('\\\\')) {\n          stream.next();\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          state.leavingExpr = true;\n          return \"string\";\n        } else {\n          stream.eat(/[`\"]/);\n        }\n\n        stream.eatWhile(/[^\\\\`\"]/);\n        return \"string\";\n      }\n\n      return tokenString;\n    }\n\n    var external = {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          scopes: [],\n          lastToken: null,\n          leavingExpr: false,\n          isDefinition: false,\n          nestedArrays: 0,\n          nestedComments: 0,\n          nestedGenerators: 0,\n          nestedParameters: 0,\n          firstParenPos: -1\n        };\n      },\n      token: function token(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        if (current && style) {\n          state.lastToken = current;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var delta = 0;\n\n        if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n          delta = -1;\n        }\n\n        return (state.scopes.length + delta) * config.indentUnit;\n      },\n      electricInput: /\\b(end|else|catch|finally)\\b/,\n      blockCommentStart: \"#=\",\n      blockCommentEnd: \"=#\",\n      lineComment: \"#\",\n      closeBrackets: \"()[]{}\\\"\\\"\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n});"],"sourceRoot":""}