{"version":3,"sources":["../../markdown-nice/node_modules/codemirror/mode/ruby/ruby.js"],"names":["CodeMirror","wordObj","words","o","i","e","length","keywordList","keywords","indentWords","dedentWords","opening","[","{","(","closing","]","}",")","defineMode","config","curPunc","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","m","phrase","mayIndent","ch","next","readQuoted","start","pos","depth","found","escaped","indexOf","backUp","regexpAhead","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","quote","unescaped","context","type","prev","startState","indented","indentUnit","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","Pass","firstChar","charAt","ct","closed","electricInput","lineComment","fold","defineMIME","registerHelper","mod","__webpack_require__"],"mappings":"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","file":"static/js/89.4f443f6f.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordObj(words) {\n    var o = {};\n\n    for (var i = 0, e = words.length; i < e; ++i) {\n      o[words[i]] = true;\n    }\n\n    return o;\n  }\n\n  var keywordList = [\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"],\n      keywords = wordObj(keywordList);\n  var indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"then\", \"catch\", \"loop\", \"proc\", \"begin\"]);\n  var dedentWords = wordObj([\"end\", \"until\"]);\n  var opening = {\n    \"[\": \"]\",\n    \"{\": \"}\",\n    \"(\": \")\"\n  };\n  var closing = {\n    \"]\": \"[\",\n    \"}\": \"{\",\n    \")\": \"(\"\n  };\n  CodeMirror.defineMode(\"ruby\", function (config) {\n    var curPunc;\n\n    function chain(newtok, stream, state) {\n      state.tokenize.push(newtok);\n      return newtok(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n        state.tokenize.push(readBlockComment);\n        return \"comment\";\n      }\n\n      if (stream.eatSpace()) return null;\n      var ch = stream.next(),\n          m;\n\n      if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n        return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n      } else if (ch == \"/\") {\n        if (regexpAhead(stream)) return chain(readQuoted(ch, \"string-2\", true), stream, state);else return \"operator\";\n      } else if (ch == \"%\") {\n        var style = \"string\",\n            embed = true;\n        if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string-2\";else if (stream.eat(/[wxq]/)) {\n          style = \"string\";\n          embed = false;\n        }\n        var delim = stream.eat(/[^\\w\\s=]/);\n        if (!delim) return \"operator\";\n        if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n        return chain(readQuoted(delim, style, embed, true), stream, state);\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n        return chain(readHereDoc(m[2], m[1]), stream, state);\n      } else if (ch == \"0\") {\n        if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n        return \"number\";\n      } else if (/\\d/.test(ch)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n        return \"number\";\n      } else if (ch == \"?\") {\n        while (stream.match(/^\\\\[CM]-/)) {}\n\n        if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n        return \"string\";\n      } else if (ch == \":\") {\n        if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n        if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state); // :> :>> :< :<< are valid symbols\n\n        if (stream.eat(/[\\<\\>]/)) {\n          stream.eat(/[\\<\\>]/);\n          return \"atom\";\n        } // :+ :- :/ :* :| :& :! are valid symbols\n\n\n        if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n          return \"atom\";\n        } // Symbols can't start by a digit\n\n\n        if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n          stream.eatWhile(/[\\w$\\xa1-\\uffff]/); // Only one ? ! = is allowed and only as the last character\n\n          stream.eat(/[\\?\\!\\=]/);\n          return \"atom\";\n        }\n\n        return \"operator\";\n      } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n        stream.eat(\"@\");\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        return \"variable-2\";\n      } else if (ch == \"$\") {\n        if (stream.eat(/[a-zA-Z_]/)) {\n          stream.eatWhile(/[\\w]/);\n        } else if (stream.eat(/\\d/)) {\n          stream.eat(/\\d/);\n        } else {\n          stream.next(); // Must be a special global like $: or $!\n        }\n\n        return \"variable-3\";\n      } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n        stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n        stream.eat(/[\\?\\!]/);\n        if (stream.eat(\":\")) return \"atom\";\n        return \"ident\";\n      } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n        curPunc = \"|\";\n        return null;\n      } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"-\" && stream.eat(\">\")) {\n        return \"arrow\";\n      } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n        var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n        if (ch == \".\" && !more) curPunc = \".\";\n        return \"operator\";\n      } else {\n        return null;\n      }\n    }\n\n    function regexpAhead(stream) {\n      var start = stream.pos,\n          depth = 0,\n          next,\n          found = false,\n          escaped = false;\n\n      while ((next = stream.next()) != null) {\n        if (!escaped) {\n          if (\"[{(\".indexOf(next) > -1) {\n            depth++;\n          } else if (\"]})\".indexOf(next) > -1) {\n            depth--;\n            if (depth < 0) break;\n          } else if (next == \"/\" && depth == 0) {\n            found = true;\n            break;\n          }\n\n          escaped = next == \"\\\\\";\n        } else {\n          escaped = false;\n        }\n      }\n\n      stream.backUp(stream.pos - start);\n      return found;\n    }\n\n    function tokenBaseUntilBrace(depth) {\n      if (!depth) depth = 1;\n      return function (stream, state) {\n        if (stream.peek() == \"}\") {\n          if (depth == 1) {\n            state.tokenize.pop();\n            return state.tokenize[state.tokenize.length - 1](stream, state);\n          } else {\n            state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n          }\n        } else if (stream.peek() == \"{\") {\n          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenBaseOnce() {\n      var alreadyCalled = false;\n      return function (stream, state) {\n        if (alreadyCalled) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length - 1](stream, state);\n        }\n\n        alreadyCalled = true;\n        return tokenBase(stream, state);\n      };\n    }\n\n    function readQuoted(quote, style, embed, unescaped) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        if (state.context.type === 'read-quoted-paused') {\n          state.context = state.context.prev;\n          stream.eat(\"}\");\n        }\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && (unescaped || !escaped)) {\n            state.tokenize.pop();\n            break;\n          }\n\n          if (embed && ch == \"#\" && !escaped) {\n            if (stream.eat(\"{\")) {\n              if (quote == \"}\") {\n                state.context = {\n                  prev: state.context,\n                  type: 'read-quoted-paused'\n                };\n              }\n\n              state.tokenize.push(tokenBaseUntilBrace());\n              break;\n            } else if (/[@\\$]/.test(stream.peek())) {\n              state.tokenize.push(tokenBaseOnce());\n              break;\n            }\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return style;\n      };\n    }\n\n    function readHereDoc(phrase, mayIndent) {\n      return function (stream, state) {\n        if (mayIndent) stream.eatSpace();\n        if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n        return \"string\";\n      };\n    }\n\n    function readBlockComment(stream, state) {\n      if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: [tokenBase],\n          indented: 0,\n          context: {\n            type: \"top\",\n            indented: -config.indentUnit\n          },\n          continuedLine: false,\n          lastTok: null,\n          varList: false\n        };\n      },\n      token: function token(stream, state) {\n        curPunc = null;\n        if (stream.sol()) state.indented = stream.indentation();\n        var style = state.tokenize[state.tokenize.length - 1](stream, state),\n            kwtype;\n        var thisTok = curPunc;\n\n        if (style == \"ident\") {\n          var word = stream.current();\n          style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n\n          if (style == \"keyword\") {\n            thisTok = word;\n            if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n          }\n        }\n\n        if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n        if (curPunc == \"|\") state.varList = !state.varList;\n        if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n          prev: state.context,\n          type: curPunc || style,\n          indented: state.indented\n        };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n        if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize[state.tokenize.length - 1] != tokenBase) return CodeMirror.Pass;\n        var firstChar = textAfter && textAfter.charAt(0);\n        var ct = state.context;\n        var closed = ct.type == closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n        return ct.indented + (closed ? 0 : config.indentUnit) + (state.continuedLine ? config.indentUnit : 0);\n      },\n      electricInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ruby\", \"ruby\");\n  CodeMirror.registerHelper(\"hintWords\", \"ruby\", keywordList);\n});"],"sourceRoot":""}